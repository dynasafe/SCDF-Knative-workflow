node {
    def mvnHome
    def mvnWorkspace = './'
    def appVersion

    def loginImageRegistry = 'docker.io'
    def imageBuildHome='./'
    def imagePushRegistry='docker.io/milkliver/java-task01'
    
    def dockerfilePath = './Dockerfile'

    def scdfAppName = "java-application03"
    def scdfTaskName = "java-task03"

    stage('Preparation') { // for display purposes
        // Get some code from a GitHub repository
        sh 'rm -rf *'
        git branch: 'main', credentialsId: 'neil-github', url: 'git@github.com:MilkLiver/scdf-java01.git'
        // Get the Maven tool.
        mvnHome = tool name: 'Default', type: 'maven'
    }
    
    stage('mvnBuild') {
        // Run the maven build
        withEnv(["MVN_HOME=$mvnHome"]) {
            dir("$mvnWorkspace") {
                sh 'echo $MVN_HOME'
                sh '$MVN_HOME/bin/mvn clean package'
                sh "mkdir externalProgramFiles"
                sh "cp ./target/*.jar ./externalProgramFiles/"
                appVersion = sh script:"$MVN_HOME/bin/mvn help:evaluate -Dexpression=project.version -q -DforceStdout",returnStdout: true
                echo "version: $appVersion"
            }
        }
    }

    stage('imageBuild') {
        // Run the image build
        withCredentials([usernamePassword(credentialsId: 'neil-dockerhub', passwordVariable: 'dockerPassword', usernameVariable: 'dockerUsername')]) {
            dir("$imageBuildHome") {
                sh "buildah --version"
                sh "buildah login -u $dockerUsername -p $dockerPassword $loginImageRegistry"
                sh "buildah bud -t $imagePushRegistry:$appVersion ."
            }
        }
    }

    stage('imagePush') {
        // Run the image push
        withCredentials([usernamePassword(credentialsId: 'neil-dockerhub', passwordVariable: 'dockerPassword', usernameVariable: 'dockerUsername')]) {
            dir("$imageBuildHome") {
                sh "podman --version"
                sh "podman login -u $dockerUsername -p $dockerPassword $loginImageRegistry"
                sh "podman push $imagePushRegistry:$appVersion"
            }
        }
    }

    stage('scdf add app') {
        // Run the scdf add app
        sh "curl --location --request POST 'http://dataflow.prd.tanzu/apps/task/$scdfAppName?uri=docker://$imagePushRegistry:$appVersion&force=false'"
        sh "curl --location --request PUT 'http://dataflow.prd.tanzu/apps/task/$scdfAppName/$appVersion'"
        //sh "curl --location --request POST 'http://dataflow.prd.tanzu/tasks/definitions?definition=$scdfAppName&name=$scdfTaskName&description= '"
    }
}
